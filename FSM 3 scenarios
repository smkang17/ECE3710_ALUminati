//There are 3 scenarios which are fib, signed_fib, and logic mix
//signed_fib is just subtracting 1
//logic mix is checking for other opcodes, all the conditions are written




///fib_fsm
module fib_fsm (
    input  wire       clk, rst,
    output reg  [3:0] ra_idx, rb_idx, rd_idx,
    output reg        wEnable,
    output reg  [7:0] alu_op,
    output reg        selB_imm,
    output reg [15:0] immB
);

    localparam
      S_INIT0_R = 6'd0,  S_INIT0_W = 6'd1,
      S_INIT1_R = 6'd2,  S_INIT1_W = 6'd3,
      S_K2_R    = 6'd4,  S_K2_W    = 6'd5,
      S_K3_R    = 6'd6,  S_K3_W    = 6'd7,
      S_K4_R    = 6'd8,  S_K4_W    = 6'd9,
      S_K5_R    = 6'd10, S_K5_W    = 6'd11,
      S_K6_R    = 6'd12, S_K6_W    = 6'd13,
      S_K7_R    = 6'd14, S_K7_W    = 6'd15,
      S_K8_R    = 6'd16, S_K8_W    = 6'd17,
      S_K9_R    = 6'd18, S_K9_W    = 6'd19,
      S_K10_R   = 6'd20, S_K10_W   = 6'd21,
      S_K11_R   = 6'd22, S_K11_W   = 6'd23,
      S_K12_R   = 6'd24, S_K12_W   = 6'd25,
      S_K13_R   = 6'd26, S_K13_W   = 6'd27,
      S_K14_R   = 6'd28, S_K14_W   = 6'd29,
      S_K15_R   = 6'd30, S_K15_W   = 6'd31,
      S_DONE    = 6'd63;

    reg [5:0] y;  // state

    always @(posedge clk) begin
        if (rst) y <= S_INIT0_R;
        else case (y)
            S_INIT0_R: y <= S_INIT0_W;
            S_INIT0_W: y <= S_INIT1_R;
            S_INIT1_R: y <= S_INIT1_W;
            S_INIT1_W: y <= S_K2_R;

            S_K2_R:  y <= S_K2_W;   S_K2_W:  y <= S_K3_R;
            S_K3_R:  y <= S_K3_W;   S_K3_W:  y <= S_K4_R;
            S_K4_R:  y <= S_K4_W;   S_K4_W:  y <= S_K5_R;
            S_K5_R:  y <= S_K5_W;   S_K5_W:  y <= S_K6_R;
            S_K6_R:  y <= S_K6_W;   S_K6_W:  y <= S_K7_R;
            S_K7_R:  y <= S_K7_W;   S_K7_W:  y <= S_K8_R;
            S_K8_R:  y <= S_K8_W;   S_K8_W:  y <= S_K9_R;
            S_K9_R:  y <= S_K9_W;   S_K9_W:  y <= S_K10_R;
            S_K10_R: y <= S_K10_W;  S_K10_W: y <= S_K11_R;
            S_K11_R: y <= S_K11_W;  S_K11_W: y <= S_K12_R;
            S_K12_R: y <= S_K12_W;  S_K12_W: y <= S_K13_R;
            S_K13_R: y <= S_K13_W;  S_K13_W: y <= S_K14_R;
            S_K14_R: y <= S_K14_W;  S_K14_W: y <= S_K15_R;
            S_K15_R: y <= S_K15_W;  S_K15_W: y <= S_DONE;

            default:  y <= S_DONE;
        endcase
    end

   //(Moore)
    always @(y) begin
        ra_idx   = 4'd0;
        rb_idx   = 4'd0;
        rd_idx   = 4'd0;
        wEnable  = 1'b0;
        alu_op   = 8'h00;     // ADD
        selB_imm = 1'b0;
        immB     = 16'h0000;

        case (y)
            // R0 <- 0
            S_INIT0_R: begin
                rd_idx   = 4'd0;     
                selB_imm = 1'b1;     
                immB     = 16'h0000; 
                // wEnable=0 (READ phase)
            end
            S_INIT0_W: begin
                rd_idx   = 4'd0;
                selB_imm = 1'b1;
                immB     = 16'h0000;
                wEnable  = 1'b1;     // WRITE phase
            end

            // R1 <- 1
            S_INIT1_R: begin
                rd_idx   = 4'd1;
                selB_imm = 1'b1;
                immB     = 16'h0001;
            end
            S_INIT1_W: begin
                rd_idx   = 4'd1;
                selB_imm = 1'b1;
                immB     = 16'h0001;
                wEnable  = 1'b1;
            end

            // R2 <- R0 + R1
            S_K2_R:  begin ra_idx=4'd0; rb_idx=4'd1; rd_idx=4'd2; selB_imm=1'b0; end
            S_K2_W:  begin ra_idx=4'd0; rb_idx=4'd1; rd_idx=4'd2; selB_imm=1'b0; wEnable=1'b1; end

            // R3 <- R1 + R2
            S_K3_R:  begin ra_idx=4'd1; rb_idx=4'd2; rd_idx=4'd3; selB_imm=1'b0; end
            S_K3_W:  begin ra_idx=4'd1; rb_idx=4'd2; rd_idx=4'd3; selB_imm=1'b0; wEnable=1'b1; end

            S_K4_R:  begin ra_idx=4'd2; rb_idx=4'd3; rd_idx=4'd4; selB_imm=1'b0; end
            S_K4_W:  begin ra_idx=4'd2; rb_idx=4'd3; rd_idx=4'd4; selB_imm=1'b0; wEnable=1'b1; end

            S_K5_R:  begin ra_idx=4'd3; rb_idx=4'd4; rd_idx=4'd5; selB_imm=1'b0; end
            S_K5_W:  begin ra_idx=4'd3; rb_idx=4'd4; rd_idx=4'd5; selB_imm=1'b0; wEnable=1'b1; end

            S_K6_R:  begin ra_idx=4'd4; rb_idx=4'd5; rd_idx=4'd6; selB_imm=1'b0; end
            S_K6_W:  begin ra_idx=4'd4; rb_idx=4'd5; rd_idx=4'd6; selB_imm=1'b0; wEnable=1'b1; end

            S_K7_R:  begin ra_idx=4'd5; rb_idx=4'd6; rd_idx=4'd7; selB_imm=1'b0; end
            S_K7_W:  begin ra_idx=4'd5; rb_idx=4'd6; rd_idx=4'd7; selB_imm=1'b0; wEnable=1'b1; end

            S_K8_R:  begin ra_idx=4'd6; rb_idx=4'd7; rd_idx=4'd8; selB_imm=1'b0; end
            S_K8_W:  begin ra_idx=4'd6; rb_idx=4'd7; rd_idx=4'd8; selB_imm=1'b0; wEnable=1'b1; end

            S_K9_R:  begin ra_idx=4'd7; rb_idx=4'd8; rd_idx=4'd9;  selB_imm=1'b0; end
            S_K9_W:  begin ra_idx=4'd7; rb_idx=4'd8; rd_idx=4'd9;  selB_imm=1'b0; wEnable=1'b1; end

            S_K10_R: begin ra_idx=4'd8; rb_idx=4'd9; rd_idx=4'd10; selB_imm=1'b0; end
            S_K10_W: begin ra_idx=4'd8; rb_idx=4'd9; rd_idx=4'd10; selB_imm=1'b0; wEnable=1'b1; end

            S_K11_R: begin ra_idx=4'd9;  rb_idx=4'd10; rd_idx=4'd11; selB_imm=1'b0; end
            S_K11_W: begin ra_idx=4'd9;  rb_idx=4'd10; rd_idx=4'd11; selB_imm=1'b0; wEnable=1'b1; end

            S_K12_R: begin ra_idx=4'd10; rb_idx=4'd11; rd_idx=4'd12; selB_imm=1'b0; end
            S_K12_W: begin ra_idx=4'd10; rb_idx=4'd11; rd_idx=4'd12; selB_imm=1'b0; wEnable=1'b1; end

            S_K13_R: begin ra_idx=4'd11; rb_idx=4'd12; rd_idx=4'd13; selB_imm=1'b0; end
            S_K13_W: begin ra_idx=4'd11; rb_idx=4'd12; rd_idx=4'd13; selB_imm=1'b0; wEnable=1'b1; end

            S_K14_R: begin ra_idx=4'd12; rb_idx=4'd13; rd_idx=4'd14; selB_imm=1'b0; end
            S_K14_W: begin ra_idx=4'd12; rb_idx=4'd13; rd_idx=4'd14; selB_imm=1'b0; wEnable=1'b1; end

            S_K15_R: begin ra_idx=4'd13; rb_idx=4'd14; rd_idx=4'd15; selB_imm=1'b0; end
            S_K15_W: begin ra_idx=4'd13; rb_idx=4'd14; rd_idx=4'd15; selB_imm=1'b0; wEnable=1'b1; end

            default:  begin end
        endcase
    end
endmodule
















////fsm_signed
module fsm_signed (
    input  wire       clk, rst,
    output reg  [3:0] ra_idx, rb_idx, rd_idx,
    output reg        wEnable,
    output reg  [7:0] alu_op,
    output reg        selB_imm,
    output reg [15:0] immB
);
    localparam S_LOAD0=0, S_LOAD1=1, S_ADD=2, S_SUB=3, S_LOOP=4, S_DONE=31;
    reg [4:0] st,nst; reg [3:0] i,ni;

    always @(posedge clk) begin
        if (rst) begin st<=S_LOAD0; i<=4'd2; end
        else begin st<=nst; i<=ni; end
    end

    always @* begin
        nst=st; ni=i;
        case (st)
            S_LOAD0: nst=S_LOAD1;                // R0 <- -1
            S_LOAD1: nst=S_ADD;                  // R1 <- +2
            S_ADD  : nst=S_SUB;                  // R2 <- R0 + R1 (=1)
            S_SUB  : nst=S_LOOP;                 // R3 <- R2 - R1 (=-1)
            S_LOOP : begin
                if (i==4'd15) nst=S_DONE;
                else begin nst=S_LOOP; ni=i+1; end
            end
            default: nst=S_DONE;
        endcase
    end

    always @* begin
        ra_idx=0; rb_idx=0; rd_idx=0; wEnable=0; alu_op=8'h00; selB_imm=0; immB=0;
        case (st)
            S_LOAD0: begin // R0 <- -1 (0xFFFF)
                ra_idx=0; rb_idx=0; rd_idx=0; wEnable=1; selB_imm=1; alu_op=8'h00; immB=16'hFFFF;
            end
            S_LOAD1: begin // R1 <- +2
                ra_idx=1; rb_idx=1; rd_idx=1; wEnable=1; selB_imm=1; alu_op=8'h00; immB=16'h0002;
            end
            S_ADD: begin   // R2 <- R0 + R1  (=1)
                ra_idx=0; rb_idx=1; rd_idx=2; wEnable=1; selB_imm=0; alu_op=8'h00;
            end
            S_SUB: begin   // R3 <- R2 - R1  (=-1)
                ra_idx=2; rb_idx=1; rd_idx=3; wEnable=1; selB_imm=0; alu_op=8'h08;
            end
            S_LOOP: begin  // R(i) <- R(i-1) + R0  
                ra_idx=i-1; rb_idx=0; rd_idx=i; wEnable=1; selB_imm=0; alu_op=8'h00;
            end
            default: wEnable=0;
        endcase
    end
endmodule













////fsm_logicmix
module fsm_logicmix (
    input  wire       clk, rst,
    output reg  [3:0] ra_idx, rb_idx, rd_idx,
    output reg        wEnable,
    output reg  [7:0] alu_op,
    output reg        selB_imm,
    output reg [15:0] immB
);
    localparam
      L_R0=0, L_R1=1, AND2=2, OR3=3, XOR4=4, NOT5=5,
      ADD6=6, SUB7=7, LSH8=8, RSH9=9, DONE=10;
    reg [4:0] st,nst;

    always @(posedge clk) if (rst) st<=L_R0; else st<=nst;

    always @* begin
        nst=st;
        case (st)
            L_R0: nst=L_R1;
            L_R1: nst=AND2;
            AND2: nst=OR3;
            OR3:  nst=XOR4;
            XOR4: nst=NOT5;
            NOT5: nst=ADD6;
            ADD6:  nst=SUB7;
            SUB7:  nst=LSH8;
            LSH8:  nst=RSH9;
            RSH9:  nst=DONE;
            default: nst=DONE;
        endcase
    end

    always @* begin
        ra_idx=0; rb_idx=0; rd_idx=0; wEnable=0; alu_op=8'h00; selB_imm=0; immB=16'h0;
        case (st)
				L_R0: begin
            ra_idx=0; rd_idx=0; wEnable=1; selB_imm=1; alu_op=8'h00; immB=16'h00FF;
				end
						
				L_R1: begin
					ra_idx=1; rd_idx=1; wEnable=1; selB_imm=1; alu_op=8'h00; immB=16'h0F0F;
				end
            AND2: begin 
                ra_idx=0; rb_idx=1; rd_idx=2; wEnable=1; alu_op=8'h0D; selB_imm=0;
            end
            OR3: begin  
                ra_idx=0; rb_idx=1; rd_idx=3; wEnable=1; alu_op=8'h0E; selB_imm=0;
            end
            XOR4: begin 
                ra_idx=0; rb_idx=1; rd_idx=4; wEnable=1; alu_op=8'h0F; selB_imm=0;
            end
            NOT5: begin 
                ra_idx=0; rb_idx=0; rd_idx=5; wEnable=1; alu_op=8'h10; selB_imm=0;
            end
            ADD6: begin  
                ra_idx=3; rb_idx=2; rd_idx=6; wEnable=1; alu_op=8'h00; selB_imm=0;
            end
            SUB7: begin  
                ra_idx=6; rb_idx=4; rd_idx=7; wEnable=1; alu_op=8'h08; selB_imm=0;
            end
            LSH8: begin  
                ra_idx=7; rb_idx=7; rd_idx=8; wEnable=1;
                alu_op=8'h11; selB_imm=0; 
            end
            RSH9: begin  
                ra_idx=8; rb_idx=8; rd_idx=9; wEnable=1; 
                
                alu_op=8'h14; selB_imm=1; immB=16'd3; 
            end
            default: wEnable=0;
        endcase
    end
endmodule

