`timescale 1ns / 1ps

module Register(
    input  [15:0]D_in,
    input  wEnable,
    input  reset,
    input  clk,
    output reg [15:0]r
);
    always @(posedge clk) begin
        if (reset) r <= 16'h0000;
        else if (wEnable) r <= D_in;
    end
endmodule

module RegBank(
    input  clk,
    input  reset,
    input  [15:0]ALUBus,
    input  [15:0]regEnable,
    output [15:0]r0, output [15:0]r1, output [15:0]r2, output [15:0]r3,
    output [15:0]r4, output [15:0]r5, output [15:0]r6, output [15:0]r7,
    output [15:0]r8, output [15:0]r9, output [15:0]r10, output [15:0]r11,
    output [15:0]r12, output [15:0]r13, output [15:0]r14, output [15:0]r15
);
    Register I0 (ALUBus, regEnable[0],  reset, clk, r0 );
    Register I1 (ALUBus, regEnable[1],  reset, clk, r1 );
    Register I2 (ALUBus, regEnable[2],  reset, clk, r2 );
    Register I3 (ALUBus, regEnable[3],  reset, clk, r3 );
    Register I4 (ALUBus, regEnable[4],  reset, clk, r4 );
    Register I5 (ALUBus, regEnable[5],  reset, clk, r5 );
    Register I6 (ALUBus, regEnable[6],  reset, clk, r6 );
    Register I7 (ALUBus, regEnable[7],  reset, clk, r7 );
    Register I8 (ALUBus, regEnable[8],  reset, clk, r8 );
    Register I9 (ALUBus, regEnable[9],  reset, clk, r9 );
    Register I10(ALUBus, regEnable[10], reset, clk, r10);
    Register I11(ALUBus, regEnable[11], reset, clk, r11);
    Register I12(ALUBus, regEnable[12], reset, clk, r12);
    Register I13(ALUBus, regEnable[13], reset, clk, r13);
    Register I14(ALUBus, regEnable[14], reset, clk, r14);
    Register I15(ALUBus, regEnable[15], reset, clk, r15);
endmodule

module mux1(
    input  [15:0]d0, input [15:0]d1, input [15:0]d2, input [15:0]d3,
    input  [15:0]d4, input [15:0]d5, input [15:0]d6, input [15:0]d7,
    input  [15:0]d8, input [15:0]d9, input [15:0]d10, input [15:0]d11,
    input  [15:0]d12, input [15:0]d13, input [15:0]d14, input [15:0]d15,
    input  [3:0]sel,
    output reg [15:0]y
);
    always @* begin
        case (sel)
            4'd0:  y = d0;   4'd1:  y = d1;   4'd2:  y = d2;   4'd3:  y = d3;
            4'd4:  y = d4;   4'd5:  y = d5;   4'd6:  y = d6;   4'd7:  y = d7;
            4'd8:  y = d8;   4'd9:  y = d9;   4'd10: y = d10;  4'd11: y = d11;
            4'd12: y = d12;  4'd13: y = d13;  4'd14: y = d14;  4'd15: y = d15;
            default: y = 16'h0000;
        endcase
    end
endmodule

module mux2(
    input  [15:0]d0,
    input  [15:0]d1,
    input  sel,
    output [15:0]y
);
    assign y = sel ? d1 : d0;
endmodule

module Lab2(
    input	clk,
    input	reset,
    input   wEnable,
    input   [3:0]ra_idx,
    input   [3:0]rb_idx,
    input   [3:0]rd_idx,
    input   [7:0]opcode,
    input   cin,
    input   [15:0]immA,
    input   [15:0]immB,
    input   selA_imm,
    input   selB_imm,
    output  [15:0]alu_out,
    output  [4:0]flags
);
    wire [15:0] r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
    wire [15:0] regEnable = wEnable ? (16'h0001 << rd_idx) : 16'h0000;

    RegBank RB (
        .clk(clk), .reset(reset),
        .ALUBus(alu_out),
        .regEnable(regEnable),
        .r0(r0), .r1(r1), .r2(r2), .r3(r3),
        .r4(r4), .r5(r5), .r6(r6), .r7(r7),
        .r8(r8), .r9(r9), .r10(r10), .r11(r11),
        .r12(r12), .r13(r13), .r14(r14), .r15(r15)
    );

    wire [15:0]busA_sel, busB_sel;
    mux1 MUXA(
        r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,
        ra_idx, busA_sel
    );
    mux1 MUXB(
        r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,
        rb_idx, busB_sel
    );

    wire [15:0]alu_A, alu_B;
    mux2 MUXA_IMM(busA_sel, immA, selA_imm, alu_A);
    mux2 MUXB_IMM(busB_sel, immB, selB_imm, alu_B);

    Lab1 ALU (
        .A(alu_A),
        .B(alu_B),
        .Cin(cin),
        .Opcode(opcode),
        .C(alu_out),
        .Flags(flags)
    );
endmodule
