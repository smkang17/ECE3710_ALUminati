`timescale 1ns/1ps

module Register(
  input      [15:0] D_in,
  input             wEnable,
  input             reset,
  input             clk,
  output reg [15:0] r
);
  always @(posedge clk) begin
    if (reset)
      r <= 16'h0000;
    else if (wEnable)
      r <= D_in;
  end
endmodule


module RegBank(
  input             clk,
  input             reset,
  input      [15:0] ALUBus,
  input      [15:0] regEnable,
  input      [3:0]  raddr_a,
  output     [15:0] rdata_a,
  input      [3:0]  raddr_b,
  output     [15:0] rdata_b,
  output     [15:0] r0, r1, r2, r3, r4, r5, r6, r7,
                    r8, r9, r10, r11, r12, r13, r14, r15
);

  wire [15:0] R0_out,  R1_out,  R2_out,  R3_out;
  wire [15:0] R4_out,  R5_out,  R6_out,  R7_out;
  wire [15:0] R8_out,  R9_out,  R10_out, R11_out;
  wire [15:0] R12_out, R13_out, R14_out, R15_out;

  Register Inst0  (ALUBus, regEnable[0],  reset, clk, R0_out );
  Register Inst1  (ALUBus, regEnable[1],  reset, clk, R1_out );
  Register Inst2  (ALUBus, regEnable[2],  reset, clk, R2_out );
  Register Inst3  (ALUBus, regEnable[3],  reset, clk, R3_out );
  Register Inst4  (ALUBus, regEnable[4],  reset, clk, R4_out );
  Register Inst5  (ALUBus, regEnable[5],  reset, clk, R5_out );
  Register Inst6  (ALUBus, regEnable[6],  reset, clk, R6_out );
  Register Inst7  (ALUBus, regEnable[7],  reset, clk, R7_out );
  Register Inst8  (ALUBus, regEnable[8],  reset, clk, R8_out );
  Register Inst9  (ALUBus, regEnable[9],  reset, clk, R9_out );
  Register Inst10 (ALUBus, regEnable[10], reset, clk, R10_out);
  Register Inst11 (ALUBus, regEnable[11], reset, clk, R11_out);
  Register Inst12 (ALUBus, regEnable[12], reset, clk, R12_out);
  Register Inst13 (ALUBus, regEnable[13], reset, clk, R13_out);
  Register Inst14 (ALUBus, regEnable[14], reset, clk, R14_out);
  Register Inst15 (ALUBus, regEnable[15], reset, clk, R15_out);

  assign r0  = R0_out;   assign r1  = R1_out;   assign r2  = R2_out;   assign r3  = R3_out;
  assign r4  = R4_out;   assign r5  = R5_out;   assign r6  = R6_out;   assign r7  = R7_out;
  assign r8  = R8_out;   assign r9  = R9_out;   assign r10 = R10_out;  assign r11 = R11_out;
  assign r12 = R12_out;  assign r13 = R13_out;  assign r14 = R14_out;  assign r15 = R15_out;

  reg [15:0] sel_a, sel_b;

  always @(*) begin
    case (raddr_a)
      4'd0: sel_a = R0_out;   4'd1: sel_a = R1_out;   4'd2: sel_a = R2_out;   4'd3: sel_a = R3_out;
      4'd4: sel_a = R4_out;   4'd5: sel_a = R5_out;   4'd6: sel_a = R6_out;   4'd7: sel_a = R7_out;
      4'd8: sel_a = R8_out;   4'd9: sel_a = R9_out;   4'd10: sel_a = R10_out; 4'd11: sel_a = R11_out;
      4'd12: sel_a = R12_out; 4'd13: sel_a = R13_out; 4'd14: sel_a = R14_out; 4'd15: sel_a = R15_out;
      default: sel_a = 16'h0000;
    endcase
  end

  always @(*) begin
    case (raddr_b)
      4'd0: sel_b = R0_out;   4'd1: sel_b = R1_out;   4'd2: sel_b = R2_out;   4'd3: sel_b = R3_out;
      4'd4: sel_b = R4_out;   4'd5: sel_b = R5_out;   4'd6: sel_b = R6_out;   4'd7: sel_b = R7_out;
      4'd8: sel_b = R8_out;   4'd9: sel_b = R9_out;   4'd10: sel_b = R10_out; 4'd11: sel_b = R11_out;
      4'd12: sel_b = R12_out; 4'd13: sel_b = R13_out; 4'd14: sel_b = R14_out; 4'd15: sel_b = R15_out;
      default: sel_b = 16'h0000;
    endcase
  end

  assign rdata_a = regEnable[raddr_a] ? ALUBus : sel_a;
  assign rdata_b = regEnable[raddr_b] ? ALUBus : sel_b;

endmodule


module PSR #(
  parameter FWIDTH = 5
)(
  input                   clk,
  input                   reset,
  input                   we_flags,
  input      [FWIDTH-1:0] flags_in,
  output reg [FWIDTH-1:0] flags_out
);
  always @(posedge clk) begin
    if (reset)       flags_out <= {FWIDTH{1'b0}};
    else if (we_flags) flags_out <= flags_in;
  end
endmodule


module Lab2 (
  input        clk,
  input        reset,
  input  [7:0] Opcode,
  input  [3:0] rs1, rs2, rd,
  input        regwrite_en,
  input        use_imm,
  input  [15:0] imm_ext,
  input        flags_we,
  output [15:0] result_C,
  output [4:0]  Flags_out
);
  wire [15:0] A, B_sel, B, C;
  wire [4:0]  Flags;
  wire [4:0]  psr_flags;

  wire [15:0] regEnable = regwrite_en ? (16'h0001 << rd) : 16'h0000;

  RegBank RF (
    .clk(clk), .reset(reset),
    .ALUBus(C), .regEnable(regEnable),
    .raddr_a(rs1), .rdata_a(A),
    .raddr_b(rs2), .rdata_b(B_sel),
    .r0(), .r1(), .r2(), .r3(), .r4(), .r5(), .r6(), .r7(),
    .r8(), .r9(), .r10(), .r11(), .r12(), .r13(), .r14(), .r15()
  );

  assign B = (use_imm) ? imm_ext : B_sel;

  PSR u_psr (
    .clk(clk), .reset(reset),
    .we_flags(flags_we),
    .flags_in(Flags),
    .flags_out(psr_flags)
  );

  Lab1 u_alu (
    .A(A),
    .B(B),
    .C(C),
    .Cin(psr_flags[0]),
    .Opcode(Opcode),
    .Flags(Flags)
  );

  assign Flags_out = psr_flags;
  assign result_C  = C;
endmodule
